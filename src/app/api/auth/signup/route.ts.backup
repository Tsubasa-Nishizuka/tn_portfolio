import { NextRequest, NextResponse } from 'next/server';
import { UserService } from '@/lib/database';
import { generateToken, validateAdminCode, validateMasterKey } from '@/lib/auth';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, email, password, role, adminCode, masterKey } = body;

    // 入力検証
    if (!name || !email || !password || !role) {
      return NextResponse.json(
        { message: '必須項目が入力されていません' },
        { status: 400 }
      );
    }

    // パスワード長チェック
    if (password.length < 8) {
      return NextResponse.json(
        { message: 'パスワードは8文字以上である必要があります' },
        { status: 400 }
      );
    }

    // 役割別の検証
    if (role === 'admin') {
      if (!adminCode || !validateAdminCode(adminCode)) {
        return NextResponse.json(
          { message: '無効な管理者認証コードです' },
          { status: 400 }
        );
      }
    }

    if (role === 'master') {
      if (!masterKey || !validateMasterKey(masterKey)) {
        return NextResponse.json(
          { message: '無効なマスターキーです' },
          { status: 400 }
        );
      }
    }

    const userService = new UserService();

    // メールアドレスの重複チェック
    const existingUser = userService.findByEmail(email);
    if (existingUser) {
      return NextResponse.json(
        { message: 'このメールアドレスは既に使用されています' },
        { status: 409 }
      );
    }

    // ユーザー作成
    const newUser = userService.create({
      name,
      email,
      password,
      role
    });

    // JWTトークン生成
    const token = generateToken({
      userId: newUser.id,
      email: newUser.email,
      role: newUser.role,
      name: newUser.name
    });

    // レスポンス作成（パスワードは除外）
    const { password: _, ...userWithoutPassword } = newUser;

    const response = NextResponse.json({
      message: 'ユーザー登録が完了しました',
      user: userWithoutPassword,
      token
    }, { status: 201 });

    // Cookieにトークンをセット
    response.cookies.set('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7 // 7日間
    });

    return response;

  } catch (error) {
    console.error('Signup error:', error);
    return NextResponse.json(
      { message: 'サーバーエラーが発生しました' },
      { status: 500 }
    );
  }
}
