import { NextRequest, NextResponse } from 'next/server';
import getUserService from '@/lib/database-updated';
import { generateToken, validateAdminCode, validateMasterKey } from '@/lib/auth';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, email, password, role, adminCode, masterKey } = body;

    // 入力検証
    if (!name || !email || !password || !role) {
      return NextResponse.json(
        { message: '必須項目が入力されていません' },
        { status: 400 }
      );
    }

    // パスワード長チェック
    if (password.length < 8) {
      return NextResponse.json(
        { message: 'パスワードは8文字以上で入力してください' },
        { status: 400 }
      );
    }

    // ロール別の認証コード検証
    if (role === 'admin' && !validateAdminCode(adminCode)) {
      return NextResponse.json(
        { message: '管理者コードが正しくありません' },
        { status: 400 }
      );
    }

    if (role === 'master' && !validateMasterKey(masterKey)) {
      return NextResponse.json(
        { message: 'マスターキーが正しくありません' },
        { status: 400 }
      );
    }

    const userService = getUserService();

    // 既存ユーザーチェック
    const existingUser = await userService.findByEmail(email);
    if (existingUser) {
      return NextResponse.json(
        { message: 'このメールアドレスは既に使用されています' },
        { status: 409 }
      );
    }

    // ユーザー作成（アダプター対応）
    const newUser = await userService.createUser({
      name,
      email,
      password,
      role: role as 'user' | 'admin' | 'master'
    });

    if (!newUser) {
      return NextResponse.json(
        { message: 'ユーザー作成に失敗しました' },
        { status: 500 }
      );
    }

    // JWTトークン生成
    const token = generateToken({
      id: newUser.id,
      email: newUser.email,
      role: newUser.role
    });

    // レスポンス作成
    const response = NextResponse.json(
      {
        message: 'ユーザー登録が完了しました',
        user: {
          id: newUser.id,
          name: newUser.name,
          email: newUser.email,
          role: newUser.role
        },
        adapterType: userService.getAdapterType() // デバッグ情報
      },
      { status: 201 }
    );

    // HttpOnlyクッキーでJWTを設定
    response.cookies.set('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 60 * 60 * 24 // 24時間
    });

    return response;

  } catch (error) {
    console.error('Signup error:', error);
    return NextResponse.json(
      { message: 'サーバーエラーが発生しました' },
      { status: 500 }
    );
  }
}
